name: Ruby SAST Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 0'

jobs:
  sast-scan:
    name: Run Ruby SAST Scan
    runs-on:
      group: huit-arc
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev libreadline-dev zlib1g-dev libyaml-dev \
        libpq-dev postgresql postgresql-contrib cmake pkg-config

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install SAST tools
      run: |
        gem install brakeman bundler-audit dawnscanner rubocop rubocop-rails rubocop-performance
        python -m pip install semgrep

    - name: Run Brakeman
      id: brakeman
      run: |
        brakeman -q -w2 --no-progress -c config/brakeman.yml \
        --format json --output brakeman-report.json \
        --format html --output brakeman-report.html
      continue-on-error: true

    - name: Process Brakeman Results
      if: always()
      run: |
        if [ -f brakeman-report.json ]; then
          # Extract warnings and create GitHub annotations
          jq -r '.warnings[] | "::warning file=\(.file),line=\(.line),col=\(.column)::\(.message)"' brakeman-report.json >> $GITHUB_STEP_SUMMARY
          
          # Count warnings by confidence level
          HIGH_WARNINGS=$(jq '.warnings | map(select(.confidence == "High")) | length' brakeman-report.json)
          MEDIUM_WARNINGS=$(jq '.warnings | map(select(.confidence == "Medium")) | length' brakeman-report.json)
          LOW_WARNINGS=$(jq '.warnings | map(select(.confidence == "Weak")) | length' brakeman-report.json)
          
          # Add summary to step output
          echo "## Brakeman Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- High confidence warnings: $HIGH_WARNINGS" >> $GITHUB_STEP_SUMMARY
          echo "- Medium confidence warnings: $MEDIUM_WARNINGS" >> $GITHUB_STEP_SUMMARY
          echo "- Low confidence warnings: $LOW_WARNINGS" >> $GITHUB_STEP_SUMMARY
          
          # Set output variables for other steps
          echo "high_warnings=$HIGH_WARNINGS" >> $GITHUB_OUTPUT
          echo "medium_warnings=$MEDIUM_WARNINGS" >> $GITHUB_OUTPUT
          echo "low_warnings=$LOW_WARNINGS" >> $GITHUB_OUTPUT
          
          # Fail if there are high confidence warnings
          if [ "$HIGH_WARNINGS" -gt 0 ]; then
            echo "::error::Found $HIGH_WARNINGS high confidence security warnings"
            exit 1
          fi
        else
          echo "::error::Brakeman report not generated"
          exit 1
        fi

    - name: Run bundle-audit
      id: bundle-audit
      run: |
        bundle-audit check --update
        bundle-audit check --format json > bundle-audit-report.json
      continue-on-error: true

    - name: Process Bundle Audit Results
      if: always()
      run: |
        if [ -f bundle-audit-report.json ]; then
          # Extract vulnerabilities and create GitHub annotations
          jq -r '.advisories[] | "::warning::\(.title) - \(.description)"' bundle-audit-report.json >> $GITHUB_STEP_SUMMARY
          
          # Count vulnerabilities by severity
          CRITICAL_VULNS=$(jq '.advisories | map(select(.cvss >= 9.0)) | length' bundle-audit-report.json)
          HIGH_VULNS=$(jq '.advisories | map(select(.cvss >= 7.0 and .cvss < 9.0)) | length' bundle-audit-report.json)
          MEDIUM_VULNS=$(jq '.advisories | map(select(.cvss >= 4.0 and .cvss < 7.0)) | length' bundle-audit-report.json)
          LOW_VULNS=$(jq '.advisories | map(select(.cvss < 4.0)) | length' bundle-audit-report.json)
          
          # Add summary to step output
          echo "## Bundle Audit Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- Critical vulnerabilities: $CRITICAL_VULNS" >> $GITHUB_STEP_SUMMARY
          echo "- High vulnerabilities: $HIGH_VULNS" >> $GITHUB_STEP_SUMMARY
          echo "- Medium vulnerabilities: $MEDIUM_VULNS" >> $GITHUB_STEP_SUMMARY
          echo "- Low vulnerabilities: $LOW_VULNS" >> $GITHUB_STEP_SUMMARY
          
          # Set output variables for other steps
          echo "critical_vulns=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
          echo "high_vulns=$HIGH_VULNS" >> $GITHUB_OUTPUT
          echo "medium_vulns=$MEDIUM_VULNS" >> $GITHUB_OUTPUT
          echo "low_vulns=$LOW_VULNS" >> $GITHUB_OUTPUT
          
          # Fail if there are critical or high vulnerabilities
          if [ "$CRITICAL_VULNS" -gt 0 ] || [ "$HIGH_VULNS" -gt 0 ]; then
            echo "::error::Found $CRITICAL_VULNS critical and $HIGH_VULNS high severity vulnerabilities"
            exit 1
          fi
        else
          echo "::error::Bundle audit report not generated"
          exit 1
        fi

    - name: Run DawnScanner
      run: |
        dawn -u
        dawn -j -o dawn-report.json

    - name: Run RuboCop security checks
      run: |
        rubocop --require rubocop-rails --require rubocop-performance \
        --format json --out rubocop-report.json \
        --only Security/Open, Security/Eval, Security/MarshalLoad, \
        Security/JSONLoad, Security/YAMLLoad, Security/CommandInjection, \
        Security/FilePath, Rails/OutputSafety

    - name: Run Semgrep
      run: |
        semgrep --config=p/ruby --config=p/rails \
        --json -o semgrep-report.json \
        --exclude-dir=vendor --exclude-dir=node_modules

    - name: Upload all results
      uses: actions/upload-artifact@v4
      with:
        name: sast-results
        path: |
          brakeman-report.*
          bundle-audit-report.json
          dawn-report.json
          rubocop-report.json
          semgrep-report.json
        retention-days: 7 