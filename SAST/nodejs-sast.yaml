name: Java SAST Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly scan on Sunday at midnight

jobs:
  sast-scan:
    name: Run Java SAST Scan
    runs-on:
      group: huit-arc
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'

    - name: Install SAST tools
      run: |
        python -m pip install semgrep
        wget -q https://github.com/spotbugs/spotbugs/releases/download/4.8.3/spotbugs-4.8.3.zip
        unzip spotbugs-4.8.3.zip
        sudo mv spotbugs-4.8.3 /opt/spotbugs
        echo 'export PATH=$PATH:/opt/spotbugs/bin' >> $GITHUB_ENV

    - name: Run SpotBugs analysis
      run: |
        ./mvnw spotbugs:check
        ./mvnw spotbugs:spotbugs -Dspotbugs.failOnError=false
        cp target/spotbugsXml.xml spotbugs-report.xml

    - name: Run Semgrep
      run: |
        semgrep --config=p/java --config=p/owasp-top-ten \
        --json -o semgrep-report.json \
        --exclude='**/target/**' --exclude='**/build/**'

    - name: Run OWASP Dependency Check
      run: |
        ./mvnw org.owasp:dependency-check-maven:check
        cp target/dependency-check-report.json dependency-check-report.json

    - name: Run PMD
      run: |
        ./mvnw pmd:check
        ./mvnw pmd:pmd -Dpmd.failOnViolation=false
        cp target/pmd.xml pmd-report.xml

    - name: Upload reports as artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: sast-results
        path: |
          spotbugs-report.xml
          semgrep-report.json
          dependency-check-report.json
          pmd-report.xml
        retention-days: 7

    - name: Check for critical findings
      run: |
        # Check SpotBugs for critical issues
        if grep -q "priority=\"1\"" spotbugs-report.xml; then
          echo "::error::Critical SpotBugs issues found!"
          exit 1
        fi
        
        # Check OWASP Dependency Check for critical vulnerabilities
        if jq -e '.dependencies[] | select(.vulnerabilities[] | .severity == "Critical")' dependency-check-report.json; then
          echo "::error::Critical dependencies found!"
          exit 1
        fi
        
        # Check npm audit for critical vulnerabilities
        if jq -e '.vulnerabilities[] | select(.severity == "critical")' npm-audit-report.json; then
          echo "::error::Critical npm vulnerabilities found!"
          exit 1
        fi
        
        # Check Semgrep for critical findings
        if jq -e '.results[] | select(.extra.severity == "ERROR")' semgrep-report.json; then
          echo "::error::Critical Semgrep findings detected!"
          exit 1
        fi
        
        # Check PMD for critical violations
        if grep -q "priority=\"1\"" pmd-report.xml; then
          echo "::error::Critical PMD violations found!"
          exit 1
        fi