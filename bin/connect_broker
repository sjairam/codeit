#!/bin/bash

# Connect to Harvard broker server
# Usage: ./connect_broker [options]
# Options:
#   -h, --help     Show this help message
#   -v, --verbose  Enable verbose SSH output

set -euo pipefail

# Configuration
SSH_KEY="$HOME/.ssh/id_202503Harvard"
SSH_USER="ec2-user"
SSH_HOST="10.37.23.227"
SSH_PORT="22"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show help
show_help() {
    cat << EOF
Connect to Harvard broker server

Usage: $(basename "$0") [options]

Options:
    -h, --help         Show this help message
    -v, --verbose      Enable verbose SSH output
    -p, --port PORT    Specify custom SSH port (default: 22)

Examples:
    $(basename "$0")              # Connect with default settings
    $(basename "$0") -v           # Connect with verbose output
    $(basename "$0") -p 2222      # Connect on port 2222

EOF
}

# Function to validate SSH key
validate_ssh_key() {
    if [[ ! -f "$SSH_KEY" ]]; then
        print_error "SSH key not found: $SSH_KEY"
        print_warning "Please ensure your SSH key is properly configured"
        exit 1
    fi
    
    if [[ ! -r "$SSH_KEY" ]]; then
        print_error "SSH key is not readable: $SSH_KEY"
        print_warning "Please check file permissions"
        exit 1
    fi
    
    print_status "SSH key validated: $SSH_KEY"
}

# Function to test connectivity
test_connectivity() {
    print_status "Testing connectivity to $SSH_HOST:$SSH_PORT..."
    
    if ! nc -z -w5 "$SSH_HOST" "$SSH_PORT" 2>/dev/null; then
        print_error "Cannot connect to $SSH_HOST:$SSH_PORT"
        print_warning "Please check your network connection and server status"
        exit 1
    fi
    
    print_status "Connectivity test passed"
}

# Parse command line arguments
VERBOSE=""
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--verbose)
            VERBOSE="-v"
            shift
            ;;
        -p|--port)
            SSH_PORT="$2"
            shift 2
            ;;
        *)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Main execution
main() {
    print_status "Connecting to Harvard broker server..."
    print_status "Host: $SSH_HOST"
    print_status "User: $SSH_USER"
    print_status "Port: $SSH_PORT"
    
    # Validate SSH key
    validate_ssh_key
    
    # Test connectivity
    test_connectivity
    
    # Build SSH command
    SSH_CMD="ssh -i '$SSH_KEY' -p '$SSH_PORT' $VERBOSE '$SSH_USER@$SSH_HOST'"
    
    print_status "Executing: $SSH_CMD"
    echo
    
    # Execute SSH connection
    eval "$SSH_CMD"
}

# Run main function
main "$@"
