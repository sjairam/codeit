#!/bin/bash
# 01 - initial - jairams
# 02 - Add AWS CLI check
# 03 - Add jq check
# 04 - Improved parameter handling and script validation
# 05 - Added colored output

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

AWS=$(command -v aws)
JQ=$(command -v jq)

# Function to display help options
Help() {
    echo -e "${BLUE}Displays IN PLAIN TEXT the Key-Value pairs for secrets in Secrets Manager${NC}"
    echo
    echo -e "${CYAN}Syntax: ./list_secrets.sh [-h|-s env/stack-secrets| -a]${NC}"
    echo -e "${YELLOW}options:${NC}"
    echo -e "-h                     Print this message."
    echo -e "-s env/stack-secrets   Prints just secrets for that stack."
    echo -e "-a                     Prints all secrets in Secrets Manager (not advised)."
    echo
}

# Function to check the availability of required binaries
check_binaries() {
    # Check AWS CLI
    if [ -z "${AWS}" ]; then
        echo -e "${RED}ERROR: The aws binary does not exist.${NC}"
        echo -e "${YELLOW}FIX: Please ensure AWS CLI is installed and in your PATH.${NC}"
        exit 1
    fi

    # Check jq
    if [ -z "${JQ}" ]; then
        echo -e "${RED}ERROR: The jq binary does not exist.${NC}"
        echo -e "${YELLOW}FIX: Please ensure jq is installed and in your PATH.${NC}"
        exit 1
    fi
}

# Function to list all secrets
list_all_secrets() {
    aws secretsmanager list-secrets --query 'SecretList[*].Name' --output text
}

# Function to describe a secret and get key-value pairs
describe_secret() {
    local secret_name="$1"
    if [ -z "$secret_name" ]; then
        echo -e "${RED}ERROR: Secret name not provided.${NC}"
        exit 1
    fi
    secret_value=$(aws secretsmanager get-secret-value --secret-id "$secret_name" --query 'SecretString' --output text)
    echo -e "${GREEN}Secret Name:${NC} ${CYAN}$secret_name${NC}"
    echo -e "${GREEN}Key-Value Pairs:${NC}"
    echo "$secret_value" | jq
}

# Function to find whitespaces in secret values
find_whitespaces() {
    local secret_name="$1"
    if [ -z "$secret_name" ]; then
        echo -e "${RED}ERROR: Secret name not provided.${NC}"
        exit 1
    fi
    string=$(aws secretsmanager get-secret-value --secret-id "$secret_name" | jq --raw-output '.SecretString')
    if [[ "$string" =~ \ |\' ]]; then
        echo -e "${RED}Secret '$secret_name': WHITESPACEs FOUND - check the output for leading or trailing spaces.${NC}"
    else
        echo -e "${GREEN}Secret '$secret_name': No whitespace found${NC}"
    fi
}

# Add parameter 1 check
if [ "$#" -lt 1 ]; then
    echo -e "${RED}Error: Missing required parameter.${NC}"
    Help
fi

# Ensure required binaries are present
check_binaries

# Parse and handle command-line options
while getopts ':as:h' opt; do
    case "$opt" in
        a)
            echo -e "${BLUE}Listing all secrets:${NC}"
            all_secrets=$(list_all_secrets)
            for secret in $all_secrets; do
                describe_secret "$secret"
            done
            ;;
        s)
            arg="$OPTARG"
            describe_secret "$arg"
            find_whitespaces "$arg"
            ;;
        h)
            Help
            exit 0
            ;;
        \?)
            echo -e "${RED}Invalid option: -$OPTARG${NC}" >&2
            Help
            exit 1
            ;;
        :)
            echo -e "${RED}Option -$OPTARG requires an argument.${NC}" >&2
            Help
            exit 1
            ;;
    esac
done
shift "$(($OPTIND -1))"