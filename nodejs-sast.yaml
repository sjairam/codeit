name: Node.js SAST Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly scan on Sunday at midnight

jobs:
  sast-scan:
    name: Run Node.js SAST Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install SAST tools
      run: |
        npm install --save-dev eslint eslint-plugin-security eslint-plugin-security-node eslint-plugin-sonarjs eslint-plugin-no-unsanitized eslint-plugin-xss eslint-plugin-unicorn
        npm install -g @nodesecure/cli @microsoft/eslint-formatter-sarif license-checker
        python -m pip install semgrep

    - name: Run ESLint security scan
      run: |
        npx eslint . --ext .js,.jsx,.ts,.tsx --config .eslintrc.sast.json -f @microsoft/eslint-formatter-sarif -o eslint-report.sarif.json

    - name: Run NodeSecure CLI
      run: |
        npx @nodesecure/cli --directory . --output nodesecure-report.json
        npx @nodesecure/cli --directory . --html

    - name: Run dependency vulnerability check
      run: |
        npm audit --json > npm-audit-report.json
        npx license-checker --json --out license-report.json

    - name: Run Semgrep
      run: |
        semgrep --config=p/javascript --config=p/nodejs --config=p/owasp-top-ten \
        --json -o semgrep-report.json \
        --exclude='**/node_modules/**' --exclude='**/dist/**'

    - name: Run JavaScript/TypeScript security scanner
      run: |
        npx @ossf/secure-js scan --all --output-file secure-js-report.json

    - name: Upload reports as artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: sast-results
        path: |
          eslint-report.sarif.json
          nodesecure-report.json
          npm-audit-report.json
          license-report.json
          semgrep-report.json
          secure-js-report.json
          nodesecure.html
        retention-days: 7

    - name: Check for critical findings
      run: |
        # Check ESLint SARIF report for errors
        if jq -e '.runs[0].results[] | select(.level == "error")' eslint-report.sarif.json; then
          echo "::error::Critical ESLint security issues found!"
          exit 1
        fi
        
        # Check NodeSecure for critical vulnerabilities
        if jq -e '.vulnerabilities[] | select(.severity == "CRITICAL")' nodesecure-report.json; then
          echo "::error::Critical NodeSecure vulnerabilities found!"
          exit 1
        fi
        
        # Check npm audit for critical vulnerabilities
        if jq -e '.vulnerabilities[] | select(.severity == "critical")' npm-audit-report.json; then
          echo "::error::Critical npm vulnerabilities found!"
          exit 1
        fi
        
        # Check Semgrep for critical findings
        if jq -e '.results[] | select(.extra.severity == "ERROR")' semgrep-report.json; then
          echo "::error::Critical Semgrep findings detected!"
          exit 1
        fi